apiVersion: v1
kind: Namespace
metadata:
  name: spire

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: spire-server
  namespace: spire

---

# Required cluster role to allow spire-server to query k8s API server
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: spire-server-cluster-role
rules:
- apiGroups: [""]
  resources: ["pods", "nodes"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "patch"]
- apiGroups: ["authentication.k8s.io"]
  resources: ["tokenreviews"]
  verbs: ["create"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["get", "list", "patch", "watch"]

---

# Binds above cluster role to spire-server service account
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: spire-server-cluster-role-binding
subjects:
- kind: ServiceAccount
  name: spire-server
  namespace: spire
roleRef:
  kind: ClusterRole
  name: spire-server-cluster-role
  apiGroup: rbac.authorization.k8s.io

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: spire-bundle
  namespace: spire

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: spire-server
  namespace: spire
data:
  server.conf: |
    server {
      bind_address = "0.0.0.0"
      bind_port = "8081"
      trust_domain = "example.org"
      data_dir = "/run/spire/data"
      log_level = "DEBUG"
      default_svid_ttl = "1h"
      ca_subject = {
        country = ["US"],
        organization = ["SPIFFE"],
        common_name = "",
      }
    }

    plugins {
      DataStore "sql" {
        plugin_data {
          database_type = "sqlite3"
          connection_string = "/run/spire/data/datastore.sqlite3"
        }
      }

      NodeAttestor "k8s_psat" {
        plugin_data {
          clusters = {
            # The name must match with registrar configuration.
            "demo-cluster" = {
              service_account_allow_list = ["spire:spire-agent"]
              kube_config_file = "/tmp/kube/kube.conf"
              # use_token_review_api_validation = true
            }
          }
        }
      }

      KeyManager "disk" {
        plugin_data {
          keys_path = "/run/spire/data/keys.json"
        }
      }

      Notifier "k8sbundle" {
        plugin_data {
          # webhook_label = "spiffe.io/webhook"
        }
      }
    }

--- 

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8s-workload-registrar-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8s-workload-registrar-role
subjects:
- kind: ServiceAccount
  name: spire-server
  namespace: spire

---


apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: spire-server
  namespace: spire
  labels:
    app: spire-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: spire-server
  serviceName: spire-server
  template:
    metadata:
      namespace: spire
      labels:
        app: spire-server
    spec:
      serviceAccountName: spire-server
      shareProcessNamespace: true
      containers:
        - name: spire-server
          image: gcr.io/spiffe-io/spire-server:1.0.2
          args:
            - -config
            - /run/spire/config/server.conf
          livenessProbe:
            exec:
              command: ["/opt/spire/bin/spire-server", "healthcheck"]
            failureThreshold: 2
            initialDelaySeconds: 15
            periodSeconds: 60
            timeoutSeconds: 3
          readinessProbe:
            exec:
              command: ["/opt/spire/bin/spire-server", "healthcheck", "--shallow"]
            initialDelaySeconds: 5
            periodSeconds: 5
          ports:
            - containerPort: 8081
          volumeMounts:
            - name: spire-config
              mountPath: /run/spire/config
              readOnly: true
            - name: spire-data
              mountPath: /run/spire/data
              readOnly: false
            - name: spire-registration-socket
              mountPath: /tmp
              readOnly: false
            - name: kube-config
              mountPath: /tmp/kube
              readOnly: false
            - name: kube-ca-vol
              mountPath: /tmp/kube/ca
              readOnly: true
      volumes:
        - name: spire-config
          configMap:
            name: spire-server
        - name: spire-agent-socket
          hostPath:
            path: /run/spire/sockets
            type: DirectoryOrCreate
        - name: k8s-workload-registrar-config
          configMap:
            name: k8s-workload-registrar
        - name: kube-config
          configMap:
            name: kube-config-map
        - name: spire-registration-socket
          emptyDir: {}
        - name: kube-ca-vol
          configMap:
            name: kube-ca
  volumeClaimTemplates:
    - metadata:
        name: spire-data
        namespace: spire
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
---

apiVersion: v1
kind: Service
metadata:
  name: spire-server
  namespace: spire
spec:
  type: NodePort
  ports:
    - name: grpc
      port: 8081
      targetPort: 8081
      protocol: TCP
  selector:
    app: spire-server

--- 

apiVersion: v1
kind: ConfigMap
metadata:
  name: kube-config-map
  namespace: spire
data:
  kube.conf: |
    apiVersion: v1
    clusters:
    - cluster:
        certificate-authority: /tmp/kube/ca/ca.crt
        extensions:
        - extension:
            last-update: Wed, 13 Oct 2021 14:25:08 -03
            provider: minikube.sigs.k8s.io
            version: v1.21.0
          name: cluster_info
        server: https://192.168.49.2:8443
      name: cluster1
    contexts:
    - context:
        cluster: cluster1
        extensions:
        - extension:
            last-update: Wed, 13 Oct 2021 14:25:08 -03
            provider: minikube.sigs.k8s.io
            version: v1.21.0
          name: context_info
        namespace: default
        user: cluster1
      name: cluster1
    current-context: cluster1
    kind: Config
    preferences: {}
    users:
    - name: cluster1
      user:
        client-certificate: /tmp/kube/ca/client.crt
        client-key: /tmp/kube/ca/client.key
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: kube-ca
  namespace: spire
data:
  ca.crt: |
    -----BEGIN CERTIFICATE-----
    MIIDBjCCAe6gAwIBAgIBATANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDEwptaW5p
    a3ViZUNBMB4XDTIxMDUxOTIxNTc0N1oXDTMxMDUxODIxNTc0N1owFTETMBEGA1UE
    AxMKbWluaWt1YmVDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAN8R
    mmpp8UK3X36cfK0vyB9vRuA2ufRyU4ouvWOpXVJ1Diz6aQXmYewveAuR3BJMaVKX
    xbGL3Dg+9RHgsytUmupop95SyaRScgMorJeRkI4vrLWw9g26tkI4qi3Q8fBNvblS
    LHd9ML0F1udZ5z4gkyQrwzJz0xggIDLRUKkvDu/qcMAgo8trYTEeZIi4yaUy9n7B
    GLrK0gJl0zPjfX2pggK+U4qaNeOb7XLIC/3bCee3xZcRXobPnSt9XL29AH5lB/Kz
    JVhzb6smMPLqUs5j0KPmoXHH4PYPYedvmguhsoft5iW3ZpWQh5sSiRE1FTXp3vFa
    mqk6IQTxT8WXQyrUckMCAwEAAaNhMF8wDgYDVR0PAQH/BAQDAgKkMB0GA1UdJQQW
    MBQGCCsGAQUFBwMCBggrBgEFBQcDATAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQW
    BBQQUZhpsBn4Wr0lVwt65pTHn+aDODANBgkqhkiG9w0BAQsFAAOCAQEAIhFxImK/
    1B9fYjdA44gCnV3oJjJl0hv6aYf9ImWnqoxMx/6Fq3bwPYS0Jwa1V0ZLw9Q8mak8
    C0heNokup+22J8DiLdteEjziscEYA1WB9RgJigB7PQpYjez5l8i7U6ORBnp3CC3h
    HLZyrPHVMvv1D7O4HQ2IukwMk8njjcB+szaSHPY0YMimiswRV5F2miL2L4CY9oA8
    FPjX5WXeE7LNM+5HBKZIkP1XoDGMKKR13JmKH+V8OaWT0HZB2g0Y+8P3Nmti2o1p
    DDmdZXGWfIBtCsK82oJePtH3JfdCSvqz98Moe9YZRQMz4/43FzeUFAJewYyaIrF+
    3HdgPa1F3+EdRw==
    -----END CERTIFICATE-----
  client.crt: |
    -----BEGIN CERTIFICATE-----
    MIIDITCCAgmgAwIBAgIBAjANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDEwptaW5p
    a3ViZUNBMB4XDTIxMTAxNDAxMTk0M1oXDTIyMTAxNTAxMTk0M1owMTEXMBUGA1UE
    ChMOc3lzdGVtOm1hc3RlcnMxFjAUBgNVBAMTDW1pbmlrdWJlLXVzZXIwggEiMA0G
    CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC1mnfkAn53vhfwH4eiDgf83oUgrY6r
    klMfdimNYhdLXAqOS872pZRYNbg3jGzry5rHOx+tHovPtN+wtVgVlEx4+bw0np4Z
    xaG7UWixo/1Nd2Vt0cXJXKEJqnHroqgs0qHr4ozUvdifZqF4kbn0chn8SprgZvA/
    fYm9i1auSjdSK4aWLqauvA8hCWxdldW6kwugSLXKWI/B8ur7qTxMeSoRgpd5UdG7
    h5F27cYwAMvxcxdfVDAAPmZHqcWwY2bdAS9+U91rNkE7LceAXZ93c0iGI5t89UwP
    gXdMK55mN8WbSSImkCx7pAHLffS7HjRjBtnVNUIgxzCkCqxWr9gnEAs7AgMBAAGj
    YDBeMA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUH
    AwIwDAYDVR0TAQH/BAIwADAfBgNVHSMEGDAWgBQQUZhpsBn4Wr0lVwt65pTHn+aD
    ODANBgkqhkiG9w0BAQsFAAOCAQEAL7QFBtQrFc8scbraXKqHqywxgWxZhCbxL61t
    5es/aSh9ECrvaD0v5YOxyQB2CTMjJG5DgVqW/CLSgY4kcvDzy5ZX3ubBhjQ5UkSV
    vC1t7qm+NJ13Syt9iT7SFtUsF1ESfL5Zj5k6Q3zmr2JMuM56MCgpqCGXNVn4W845
    RJvvDp4jeI8hztCyJ6Pov+P934d6eAhbVMbF+Dh9kWhyy/Y9BWvZYhhNZsQ8M4aM
    U9LbIS3nJ3cRiXiyeWKuliuWybCU6xqDX5BV8RE40MlfTOYzvSRQGK6Kuig4YD1M
    DNUNkyjcy9GnOGPt0I53I4FkFpoDHKY7KiY/BToNBKO9b+Y59Q==
    -----END CERTIFICATE-----
  client.key: |
    -----BEGIN RSA PRIVATE KEY-----
    MIIEogIBAAKCAQEAtZp35AJ+d74X8B+Hog4H/N6FIK2Oq5JTH3YpjWIXS1wKjkvO
    9qWUWDW4N4xs68uaxzsfrR6Lz7TfsLVYFZRMePm8NJ6eGcWhu1FosaP9TXdlbdHF
    yVyhCapx66KoLNKh6+KM1L3Yn2aheJG59HIZ/Eqa4GbwP32JvYtWrko3UiuGli6m
    rrwPIQlsXZXVupMLoEi1yliPwfLq+6k8THkqEYKXeVHRu4eRdu3GMADL8XMXX1Qw
    AD5mR6nFsGNm3QEvflPdazZBOy3HgF2fd3NIhiObfPVMD4F3TCueZjfFm0kiJpAs
    e6QBy330ux40YwbZ1TVCIMcwpAqsVq/YJxALOwIDAQABAoIBAAwlM4V1QT4C4Zj2
    ktycsZ4Qx7iCwvrog1SkU20YNVSd6DrSCRpnwn8PwK0+X/55FHXkl169nz4Z66fm
    yOhQjbi9gv/F5+7zT7i2XhkbTZKDvK3WjLLF1iNOWeYXb8XnpFqhQSftNnKaq4vj
    uxsFEoXT+32shL7KR478paRsZDzDfYBMb/5lq3avZMjzP0ji9n+6yERYtkyieLNN
    0qmxmlQ6V1cb4X17AQbxNm39r2gAlaL0QS3MDhkYx0ku8a40v88KvFkbem3MZqhn
    Izdea3kZrm1OkhisO6Z22C/wtvHijqKXAUuM6QS2nQIRBhVSF79KgkA4bCC8ARQi
    SCGTP8ECgYEA6pnCw2FbLTVKbNZHC8PG5PIjfDf0uo5ALO15sXvjghW6eN+2rJ4m
    Pg8tTi9CKVl75JF9crvy4Cz2dEdtgNPAcyEN4faPheI7/N9vXTCk6kFN9svRvGKd
    hcfEe4cKquoSAvlQxWYmZZhBforoV3DW6N2gh9WdIUPf6f8+ymkqaKECgYEAxism
    qG/qu3fQyPSz/tCkljK2xsspy+UYWhMtneJEPB1ioe6iaTJgxT6edDHM3QT0W4qA
    WM2J97KvFx8eu72IG99ujXvJguje10GQL8pNeN9QNbfqEJECw4KBQ8SMUK8kSMEZ
    GBWnZY1/S82d4Mfj1RWWY87VdzcKWpoQQcqMmlsCgYBhHN9Ts6RjlXDGlvj39MYL
    lfR8gklLRIFqV6+NeeRWwBnd2XWsBRd9jxjJCaUQqtsvZc6RRR4oEFTBE6RPtNgw
    kFlH1aHZ4SnF5tQZtn49/mSAqiSbIBNnAqfiHqea0qQ8GOqHnF5+pcVO1b+SGsLL
    yJqgQBv4Xjl9isx6S4hjoQKBgAS2Bec/Md9fC9GbL6RBJYiEkB/NuKKmQZvylMUK
    GgEr2apr1+SUVAScZnvwqyQd+AktE7wIttzynIL6NGrWKKQw/ZnTdYjtLE8Fuf3I
    22qiNG/yfVgDeoNXWOdZhtRsNXqdTJFsAlzBrmMI8lXjqqDoMHkS87Qv1MkunHBT
    9l+9AoGAcSyB0puC1Lo2eFCmCGsVGuvFZF3t8TlT/xS/m12cbO9Kc4/FfJe4QcyZ
    0gIABN8OENVCsTPlAr5xVioS/E/UoNlhLLfS9kdWr1MpsW821Zv1qYw52JgVEW/Q
    khbEqCHxWVQrotTRBgaP/qvk7vhWl3A3ObU3U8cZSITXFnJexJU=
    -----END RSA PRIVATE KEY-----
